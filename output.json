[
  {
    "posterName": "React Fundamentals",
    "text": "Welcome to your learning feed on React! React is a powerful JavaScript library used for building user interfaces, especially for single-page applications. It allows developers to create reusable UI components, which makes building complex interfaces much more manageable.",
    "displayStyle": "BASIC",
    "type": "Post"
  },
  {
    "posterName": "React Explained",
    "text": "At its core, React enables the creation of dynamic and interactive user interfaces. It uses a component-based architecture, meaning you build encapsulated components that manage their own state and compose them to make complex UIs.",
    "displayStyle": "AI_IMAGE",
    "aiImagePrompt": "A visual representation of a user interface being assembled from various interlocking blocks, each labeled with a different component name like 'Navbar', 'Sidebar', and 'Feed'.",
    "type": "Post"
  },
  {
    "posterName": "JSX - JavaScript XML",
    "text": "JSX, or JavaScript XML, is a syntax extension for JavaScript that looks very similar to HTML. It allows you to write what your UI should look like in a declarative way, making your code more readable and intuitive. Behind the scenes, JSX is converted into regular JavaScript by a tool called Babel.",
    "displayStyle": "WEB_IMAGE",
    "imageSearchQuery": "JSX code example",
    "type": "Post"
  },
  {
    "posterName": "Developer Dan",
    "text": "Just starting with React and I'm a bit confused about JSX. Is it just HTML in JavaScript?",
    "displayStyle": "COMMENT",
    "type": "Post"
  },
  {
    "posterName": "Quiz",
    "text": "",
    "displayStyle": "QUIZ",
    "quizQuestions": [
      {
        "question": "What is React primarily used for?",
        "answers": [
          "Building mobile applications",
          "Building user interfaces",
          "Managing databases"
        ],
        "correctIndex": 1
      },
      {
        "question": "What is JSX?",
        "answers": [
          "A new programming language",
          "A syntax extension for JavaScript",
          "A database query language"
        ],
        "correctIndex": 1
      },
      {
        "question": "What is the name of the tool that converts JSX into regular JavaScript?",
        "answers": [
          "Webpack",
          "Babel",
          "Node.js"
        ],
        "correctIndex": 1
      }
    ],
    "type": "Post"
  },
  {
    "posterName": "React Components",
    "text": "Components are the building blocks of any React application. They are independent and reusable pieces of code that return a description of what should appear on the screen. Think of them as custom, reusable HTML elements.",
    "displayStyle": "BASIC",
    "type": "Post"
  },
  {
    "posterName": "Functional vs. Class Components",
    "text": "In React, you can create components in two ways: as JavaScript functions (functional components) or as ES6 classes (class components). While both can achieve the same results, functional components with Hooks are the more modern and recommended approach.",
    "displayStyle": "AI_IMAGE",
    "aiImagePrompt": "A split-screen image. On one side, a simple, elegant function icon representing a functional component. On the other side, a more complex, blueprint-style icon representing a class component.",
    "type": "Post"
  },
  {
    "posterName": "React Props",
    "text": "Props (short for properties) are how you pass data from a parent component to a child component. This is a one-way data flow, making it easier to understand and debug your application. Props are read-only, meaning a child component cannot change the props it receives.",
    "displayStyle": "WEB_IMAGE",
    "imageSearchQuery": "React props data flow diagram",
    "type": "Post"
  },
  {
    "posterName": "Code Snippet",
    "text": "Here's a simple example of passing a 'name' prop to a 'Welcome' component:\n\n```javascript\nfunction Welcome(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n\nfunction App() {\n  return <Welcome name=\"Sarah\" />;\n}\n```",
    "displayStyle": "BASIC",
    "type": "Post"
  },
  {
    "posterName": "Quiz",
    "text": "",
    "displayStyle": "QUIZ",
    "quizQuestions": [
      {
        "question": "What are the two types of components in React?",
        "answers": [
          "Simple and Complex",
          "Functional and Class",
          "Static and Dynamic"
        ],
        "correctIndex": 1
      },
      {
        "question": "What is the primary purpose of props?",
        "answers": [
          "To style components",
          "To handle user events",
          "To pass data to child components"
        ],
        "correctIndex": 2
      },
      {
        "question": "Are props mutable or immutable within the child component?",
        "answers": [
          "Mutable",
          "Immutable",
          "It depends on the data type"
        ],
        "correctIndex": 1
      }
    ],
    "type": "Post"
  },
  {
    "posterName": "React State",
    "text": "While props are for passing data down, 'state' is for managing a component's internal data that can change over time. When a component's state changes, React will re-render the component to reflect the new data.",
    "displayStyle": "BASIC",
    "type": "Post"
  },
  {
    "posterName": "React Feynman",
    "text": "Time to test your understanding! Try to explain these concepts in your own words, as if you were teaching them to someone else.",
    "displayStyle": "EXERCISE",
    "exerciseQuestions": [
      "What is the difference between props and state?",
      "Why is it important that component names start with a capital letter?",
      "What is the purpose of a React Fragment (<>...</>)?"
    ],
    "type": "Post"
  },
  {
    "posterName": "useState Hook",
    "text": "With functional components, we use the `useState` Hook to add state. A Hook is a special function that lets you “hook into” React features. `useState` returns an array with two elements: the current state value and a function to update it.",
    "displayStyle": "AI_IMAGE",
    "aiImagePrompt": "A visual of a hook pulling a state variable out of a function component, with an arrow showing the state being updated and causing the component to re-render.",
    "type": "Post"
  },
  {
    "posterName": "Meme Time",
    "text": "When you finally understand the difference between props and state.",
    "displayStyle": "MEME",
    "type": "Post"
  },
  {
    "posterName": "Quiz",
    "text": "",
    "displayStyle": "QUIZ",
    "quizQuestions": [
      {
        "question": "What is used to manage a component's internal data that changes over time?",
        "answers": [
          "Props",
          "State",
          "Functions"
        ],
        "correctIndex": 1
      },
      {
        "question": "What does the `useState` Hook return?",
        "answers": [
          "The state value and a function to update it",
          "Only the state value",
          "A boolean indicating if the state has changed"
        ],
        "correctIndex": 0
      },
      {
        "question": "What happens when a component's state changes?",
        "answers": [
          "The entire application reloads",
          "The component re-renders",
          "An error is thrown"
        ],
        "correctIndex": 1
      }
    ],
    "type": "Post"
  },
  {
    "posterName": "React Resources",
    "text": "Ready to dive deeper? Here are some excellent resources to continue your React journey:",
    "displayStyle": "SOURCES",
    "type": "Post"
  },
  {
    "nextTopicSuggestions": [
      "React Hooks",
      "React Router",
      "State Management with Redux"
    ],
    "type": "NewSuggestions"
  }
]