[
  {
    "posterName": "React Simplified",
    "text": "Welcome to your learning feed on React! React is a JavaScript library for building user interfaces. It lets you create reusable UI components and manage their state efficiently.",
    "displayStyle": "BASIC"
  },
  {
    "posterName": "CodeCrafter",
    "text": "At the heart of React is the concept of components. Think of them as independent, reusable bits of code. They work like JavaScript functions, accepting inputs called 'props' and returning React elements that describe what should appear on the screen.",
    "displayStyle": "AI_IMAGE",
    "aiImagePrompt": "A visual representation of React components as building blocks, each with its own state and props, coming together to form a complete user interface."
  },
  {
    "posterName": "JSX Explained",
    "text": "JSX, which stands for JavaScript XML, is a syntax extension for JavaScript that looks a lot like HTML. It allows you to write what your UI should look like in a declarative way. Under the hood, Babel compiles JSX down to `React.createElement()` calls.",
    "displayStyle": "WEB_IMAGE",
    "imageSearchQuery": "JSX code snippet"
  },
  {
    "posterName": "State & Props",
    "text": "In React, 'props' (properties) are used to pass data from a parent component to a child component, and they are immutable. 'State', on the other hand, is for managing a component's internal data that can change over time.",
    "displayStyle": "BASIC"
  },
  {
    "posterName": "Quiz",
    "text": "",
    "displayStyle": "QUIZ",
    "quizQuestions": [
      {
        "question": "What is JSX?",
        "answers": [
          "A new programming language",
          "A syntax extension for JavaScript",
          "A database for React"
        ],
        "correctIndex": 1
      },
      {
        "question": "What is the main difference between state and props?",
        "answers": [
          "Props are for data that changes, state is for data that doesn't",
          "State is passed from parent to child, props are managed within the component",
          "Props are passed from parent to child, state is managed within the component"
        ],
        "correctIndex": 2
      },
      {
        "question": "What are React components?",
        "answers": [
          "CSS stylesheets",
          "Reusable pieces of UI",
          "Database schemas"
        ],
        "correctIndex": 1
      }
    ]
  },
  {
    "posterName": "Virtual DOM",
    "text": "The virtual DOM (VDOM) is a programming concept where a virtual representation of the UI is kept in memory and synced with the 'real' DOM. This allows React to perform updates efficiently by only re-rendering the parts of the UI that have changed.",
    "displayStyle": "AI_IMAGE",
    "aiImagePrompt": "An abstract illustration of the Virtual DOM concept, showing a lightweight copy of the DOM tree and a diffing algorithm that highlights the changed nodes."
  },
  {
    "posterName": "React Hooks",
    "text": "Hooks are functions that let you 'hook into' React state and lifecycle features from function components. This means you can use state and other React features without writing a class.",
    "displayStyle": "BASIC"
  },
  {
    "posterName": "useState Explained",
    "text": "The `useState` hook is a fundamental hook that allows you to add state to your functional components. You call it with the initial state, and it returns the current state and a function to update it.",
    "displayStyle": "SOURCES",
    "sources": [
      "https://react.dev/reference/react/useState"
    ]
  },
  {
    "posterName": "useEffect Explained",
    "text": "The `useEffect` hook lets you perform side effects in your components. Common side effects include fetching data, setting up a subscription, or manually changing the DOM. It runs after every render by default, but you can control when it runs.",
    "displayStyle": "BASIC"
  },
  {
    "posterName": "Quiz",
    "text": "",
    "displayStyle": "QUIZ",
    "quizQuestions": [
      {
        "question": "What is the Virtual DOM?",
        "answers": [
          "A direct representation of the HTML in the browser",
          "A lightweight in-memory copy of the real DOM",
          "A server-side rendering technique"
        ],
        "correctIndex": 1
      },
      {
        "question": "What do React Hooks allow you to do?",
        "answers": [
          "Use state and other React features in class components",
          "Use state and other React features in functional components",
          "Directly manipulate the real DOM"
        ],
        "correctIndex": 1
      },
      {
        "question": "What does the `useState` hook return?",
        "answers": [
          "The current state and a function to update it",
          "Only the current state",
          "Only a function to update the state"
        ],
        "correctIndex": 0
      }
    ]
  },
  {
    "posterName": "Feynman",
    "text": "Time for a check-in! Let's solidify your understanding of some core React concepts with the Feynman technique. Try to explain these topics in simple terms, as if you were teaching them to someone else.",
    "displayStyle": "EXERCISE",
    "exerciseQuestions": [
      "Explain the concept of conditional rendering in React and provide an example of how you might use it.",
      "What are lists and keys in React, and why are keys important for performance?",
      "Describe how event handling works in React and how it differs from traditional HTML event handling."
    ]
  },
  {
    "posterName": "Conditional Rendering",
    "text": "Conditional rendering in React allows you to render different UI elements based on certain conditions. You can use standard JavaScript constructs like `if/else`, the ternary operator, or logical operators like `&&` to achieve this.",
    "displayStyle": "BASIC"
  },
  {
    "posterName": "Lists and Keys",
    "text": "When rendering lists of elements in React, you should always provide a unique `key` prop to each list item. Keys help React identify which items have changed, are added, or are removed, which helps in efficiently updating the UI.",
    "displayStyle": "AI_IMAGE",
    "aiImagePrompt": "A visual of a list of items being reordered. Each item has a unique key that stays with it, helping React track the changes."
  },
  {
    "posterName": "Event Handling",
    "text": "Handling events in React is similar to handling events in HTML, but with a few syntactical differences. React events are named using camelCase, and you pass a function as the event handler rather than a string.",
    "displayStyle": "WEB_IMAGE",
    "imageSearchQuery": "React onClick event handler example"
  },
  {
    "posterName": "Quiz",
    "text": "",
    "displayStyle": "QUIZ",
    "quizQuestions": [
      {
        "question": "Which of the following is NOT a valid way to do conditional rendering in React?",
        "answers": [
          "Using an if/else statement",
          "Using the ternary operator",
          "Using a for loop inside JSX"
        ],
        "correctIndex": 2
      },
      {
        "question": "Why are keys important when rendering lists in React?",
        "answers": [
          "They provide styling to the list items",
          "They help React identify which items have changed, been added, or removed",
          "They are used to fetch data for each list item"
        ],
        "correctIndex": 1
      },
      {
        "question": "How are React event handlers named?",
        "answers": [
          "lowercase",
          "UPPERCASE",
          "camelCase"
        ],
        "correctIndex": 2
      }
    ]
  },
  {
    "posterName": "React Router",
    "text": "React Router is a standard library for routing in React. It enables the navigation among views of various components in a React Application, allows changing the browser URL, and keeps the UI in sync with the URL.",
    "displayStyle": "BASIC"
  },
  {
    "posterName": "Redux",
    "text": "Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently and are easy to test. It's often used with React for managing the application's global state.",
    "displayStyle": "SOURCES",
    "sources": [
      "https://redux.js.org/"
    ]
  },
  {
    "nextTopicSuggestions": [
      "Advanced React Hooks (useContext, useReducer)",
      "State Management with Redux",
      "Testing React Components"
    ]
  }
]