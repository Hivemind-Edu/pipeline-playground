[
  {
    "posterName": "ReactLearner",
    "text": "React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called \"components.\"",
    "displayStyle": "BASIC",
    "exerciseQuestions": []
  },
  {
    "posterName": "CoreConcepts",
    "text": "The Virtual DOM (VDOM) is a programming concept where a virtual representation of a UI is kept in memory and synced with the \"real\" DOM. This process is called reconciliation and makes React fast.",
    "displayStyle": "AI_IMAGE",
    "exerciseQuestions": [],
    "aiImagePrompt": "Illustration of a fast, efficient synchronization process between two tree structures labeled \"Virtual DOM\" and \"Real DOM\"."
  },
  {
    "posterName": "ComponentKing",
    "text": "Everything in React is a component. Think of them as custom, reusable HTML elements. They can be functional (using hooks) or class-based.",
    "displayStyle": "WEB_IMAGE",
    "exerciseQuestions": [],
    "imageSearchQuery": "React components structure diagram"
  },
  {
    "posterName": "Feynman",
    "text": "Time to solidify your understanding of the fundamentals. Explain these concepts as if you were teaching a beginner.",
    "displayStyle": "EXERCISE",
    "exerciseQuestions": [
      "Explain the difference between functional components and class components.",
      "Describe the role of 'props' in React.",
      "What is component composition?"
    ]
  },
  {
    "posterName": "Quiz",
    "text": "",
    "displayStyle": "QUIZ",
    "quizQuestions": [
      {
        "question": "What is the primary function of JSX?",
        "answers": [
          "To render HTML directly in JavaScript files",
          "To define component logic",
          "To manage state"
        ],
        "correctIndex": 0
      },
      {
        "question": "Which method is used to update state in a functional component?",
        "answers": [
          "this.setState()",
          "useState() hook",
          "componentDidUpdate()"
        ],
        "correctIndex": 1
      },
      {
        "question": "React uses which mechanism to efficiently update the UI?",
        "answers": [
          "Shadow DOM",
          "Real DOM manipulation",
          "Virtual DOM"
        ],
        "correctIndex": 2
      }
    ],
    "exerciseQuestions": []
  },
  {
    "posterName": "SyntaxGuru",
    "text": "JSX (JavaScript XML) is a syntax extension for JavaScript. It looks like HTML but allows you to write JavaScript expressions inside curly braces {}. It gets compiled down to standard JavaScript calls.",
    "displayStyle": "BASIC",
    "exerciseQuestions": []
  },
  {
    "posterName": "StateMaster",
    "text": "Remember, state is data that changes over time and determines how a component renders. It should be managed locally within the component where it's defined, or lifted up if multiple components need access.",
    "displayStyle": "COMMENT",
    "exerciseQuestions": []
  },
  {
    "posterName": "HookHumor",
    "text": "When you realize useState is just a fancy way of saying \"I need to remember this value.\"",
    "displayStyle": "MEME",
    "exerciseQuestions": []
  },
  {
    "posterName": "ResourceHub",
    "text": "Dive deeper into official documentation and modern practices. The official React docs are excellent, and sites like freeCodeCamp and Frontend Masters offer great courses.",
    "displayStyle": "SOURCES",
    "exerciseQuestions": []
  },
  {
    "posterName": "Quiz",
    "text": "",
    "displayStyle": "QUIZ",
    "quizQuestions": [
      {
        "question": "Which hook is typically used for side effects in functional components?",
        "answers": [
          "useContext",
          "useReducer",
          "useEffect"
        ],
        "correctIndex": 2
      },
      {
        "question": "What does 'lifting state up' mean in React?",
        "answers": [
          "Moving state to the global scope",
          "Moving state to a common ancestor component",
          "Using Redux for state management"
        ],
        "correctIndex": 1
      },
      {
        "question": "Can a functional component have state without hooks?",
        "answers": [
          "Yes, using legacy methods",
          "No, hooks are required for state in functional components",
          "Only if it's a memoized component"
        ],
        "correctIndex": 1
      }
    ],
    "exerciseQuestions": []
  },
  {
    "posterName": "LifecycleExpert",
    "text": "Think of a component's lifecycle as three main phases: Mounting (birth), Updating (growth), and Unmounting (death). Hooks like useEffect help us tap into these phases in functional components.",
    "displayStyle": "AI_IMAGE",
    "exerciseQuestions": [],
    "aiImagePrompt": "Abstract visual representation of a cycle diagram showing three stages: Initialization/Mounting, Rerendering/Updating, and Destruction/Unmounting, related to a digital component."
  },
  {
    "posterName": "Feynman",
    "text": "Explain the practical use case for these two essential hooks.",
    "displayStyle": "EXERCISE",
    "exerciseQuestions": [
      "Explain the dependency array in the useEffect hook and why it's crucial.",
      "Describe when you would choose useReducer over useState."
    ]
  },
  {
    "posterName": "DataFlow",
    "text": "Props are immutable (read-only) inputs passed from parent to child. State is mutable data managed internally by the component. This distinction is fundamental!",
    "displayStyle": "WEB_IMAGE",
    "exerciseQuestions": [],
    "imageSearchQuery": "React Props vs State comparison diagram"
  },
  {
    "posterName": "LogicFlow",
    "text": "In React, you conditionally render components or elements using standard JavaScript logic, such as if statements, ternary operators, or short-circuit evaluation (&&).",
    "displayStyle": "BASIC",
    "exerciseQuestions": []
  },
  {
    "posterName": "Quiz",
    "text": "",
    "displayStyle": "QUIZ",
    "quizQuestions": [
      {
        "question": "Which built-in hook is used for optimizing performance by memoizing expensive calculations?",
        "answers": [
          "useMemo",
          "useCallback",
          "useRef"
        ],
        "correctIndex": 0
      },
      {
        "question": "What is the primary purpose of React Router?",
        "answers": [
          "Managing global state",
          "Handling client-side navigation and routing",
          "Optimizing component rendering"
        ],
        "correctIndex": 1
      },
      {
        "question": "What is the default behavior of the useEffect hook if no dependency array is provided?",
        "answers": [
          "It runs only once after initial render",
          "It runs on every render",
          "It throws an error"
        ],
        "correctIndex": 1
      }
    ],
    "exerciseQuestions": []
  },
  {
    "posterName": "RouteRider",
    "text": "While React is just a UI library, most applications need routing. React Router is the most common library for handling declarative navigation within your single-page application (SPA).",
    "displayStyle": "COMMENT",
    "exerciseQuestions": []
  }
]