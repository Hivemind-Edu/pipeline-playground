[
  {
    "posterName": "React Fundamentals",
    "text": "Welcome to your learning feed on React! React is a powerful JavaScript library for building user interfaces, developed by Facebook. It allows developers to create reusable UI components and build complex applications efficiently.",
    "displayStyle": "BASIC",
    "type": "Post"
  },
  {
    "posterName": "React Explained",
    "text": "At its core, React uses a component-based architecture. Think of components as independent, reusable pieces of code, much like JavaScript functions, that return HTML. This modular approach makes it easier to manage and scale your applications.",
    "displayStyle": "AI_IMAGE",
    "aiImagePrompt": "A visual representation of a user interface being assembled from various interlocking blocks, each labeled as a 'Component'. The blocks should have different colors and sizes, symbolizing the variety and reusability of React components. The overall image should convey a sense of modularity and organization.",
    "type": "Post"
  },
  {
    "posterName": "JSX",
    "text": "One of the first things you'll encounter in React is JSX, which stands for JavaScript XML. It's a syntax extension that allows you to write HTML-like code directly within your JavaScript. This makes your code more readable and expressive.",
    "displayStyle": "WEB_IMAGE",
    "imageSearchQuery": "react jsx code example",
    "type": "Post"
  },
  {
    "posterName": "The Virtual DOM",
    "text": "React's secret to performance is the Virtual DOM. It's a lightweight copy of the real DOM kept in memory. When the state of your application changes, React first updates the Virtual DOM, then efficiently calculates the minimal changes needed to update the actual DOM. This process is called reconciliation.",
    "displayStyle": "EXERCISE",
    "exerciseQuestions": [
      "In your own words, what is the Virtual DOM and why is it beneficial for performance?",
      "Explain the concept of 'reconciliation' in the context of React's Virtual DOM.",
      "How does the Virtual DOM differ from the Shadow DOM?"
    ],
    "type": "Post"
  },
  {
    "posterName": "Quiz",
    "text": "",
    "displayStyle": "QUIZ",
    "quizQuestions": [
      {
        "question": "What is React primarily used for?",
        "answers": [
          "Backend development",
          "Building user interfaces",
          "Database management"
        ],
        "correctIndex": 1
      },
      {
        "question": "What does JSX stand for?",
        "answers": [
          "JavaScript XML",
          "Java Syntax Extension",
          "JSON Syntax"
        ],
        "correctIndex": 0
      },
      {
        "question": "What is the main benefit of the Virtual DOM?",
        "answers": [
          "It makes the code easier to write.",
          "It improves application performance.",
          "It's a replacement for the real DOM."
        ],
        "correctIndex": 1
      }
    ],
    "type": "Post"
  },
  {
    "posterName": "State vs. Props",
    "text": "In React, data flows in one direction. 'Props' (short for properties) are used to pass data from a parent component to a child component and are read-only. 'State' is for managing a component's internal data that can change over time. State is managed within the component and can be updated, triggering a re-render.",
    "displayStyle": "BASIC",
    "type": "Post"
  },
  {
    "posterName": "Component Lifecycle",
    "text": "Every React component has a lifecycle with three main phases: Mounting, Updating, and Unmounting. These phases have specific methods that allow you to run code at particular times, like when a component is first added to the DOM (`componentDidMount`) or just before it's removed (`componentWillUnmount`).",
    "displayStyle": "AI_IMAGE",
    "aiImagePrompt": "An illustration showing a plant's lifecycle, from a seed (Mounting), to a growing plant (Updating), and finally a wilting plant (Unmounting). Each stage should be clearly labeled with the corresponding React component lifecycle phase.",
    "type": "Post"
  },
  {
    "posterName": "ProTip",
    "text": "Remember to bind your event handlers in class components to ensure `this` refers to the component instance. With functional components and hooks, this is often not an issue!",
    "displayStyle": "COMMENT",
    "type": "Post"
  },
  {
    "posterName": "React Hooks",
    "text": "Hooks are a powerful feature introduced in React 16.8 that let you use state and other React features in functional components without writing a class. The most common hooks are `useState` for managing state and `useEffect` for handling side effects.",
    "displayStyle": "MEME",
    "type": "Post"
  },
  {
    "posterName": "Quiz",
    "text": "",
    "displayStyle": "QUIZ",
    "quizQuestions": [
      {
        "question": "What is the primary way to pass data from a parent to a child component?",
        "answers": [
          "State",
          "Props",
          "Events"
        ],
        "correctIndex": 1
      },
      {
        "question": "Which lifecycle method is called after a component is rendered for the first time?",
        "answers": [
          "componentDidMount",
          "componentWillUnmount",
          "render"
        ],
        "correctIndex": 0
      },
      {
        "question": "What do React Hooks allow you to do?",
        "answers": [
          "Use state in class components",
          "Use state and lifecycle features in functional components",
          "Replace the need for props"
        ],
        "correctIndex": 1
      }
    ],
    "type": "Post"
  },
  {
    "posterName": "React Router",
    "text": "React itself is a library for building user interfaces, not a full framework. For handling navigation between different pages in a single-page application, you'll often use a library like React Router. It provides components for defining routes and linking between them.",
    "displayStyle": "BASIC",
    "type": "Post"
  },
  {
    "posterName": "State Management",
    "text": "For larger applications, managing state can become complex. While React has its own Context API, many developers turn to libraries like Redux for a more centralized and predictable way to manage the application's state.",
    "displayStyle": "AI_IMAGE",
    "aiImagePrompt": "A diagram showing a central 'store' of data with arrows pointing to various components of a user interface. This illustrates the concept of a centralized state management library like Redux, where the state is held in a single location and components can access and update it.",
    "type": "Post"
  },
  {
    "posterName": "Testing React",
    "text": "To ensure your components work as expected, you'll want to write tests. The React Testing Library is a popular choice that encourages testing your application in a way that resembles how a user would interact with it.",
    "displayStyle": "EXERCISE",
    "exerciseQuestions": [
      "Why is it important to test React components from a user's perspective?",
      "What is the purpose of a test runner like Jest in the context of React testing?",
      "Describe a scenario where you would use a query like `getByText` in React Testing Library."
    ],
    "type": "Post"
  },
  {
    "posterName": "Deeper Dive",
    "text": "Ready to go further? Explore these resources to expand your React knowledge.",
    "displayStyle": "SOURCES",
    "type": "Post"
  },
  {
    "posterName": "Quiz",
    "text": "",
    "displayStyle": "QUIZ",
    "quizQuestions": [
      {
        "question": "What is React Router used for?",
        "answers": [
          "Styling components",
          "Managing application state",
          "Handling navigation and routing"
        ],
        "correctIndex": 2
      },
      {
        "question": "Which of the following is a popular state management library for React?",
        "answers": [
          "React Router",
          "Redux",
          "Jest"
        ],
        "correctIndex": 1
      },
      {
        "question": "What is the main philosophy of the React Testing Library?",
        "answers": [
          "To test the implementation details of components",
          "To test components in a way that resembles user interaction",
          "To only test the visual appearance of components"
        ],
        "correctIndex": 1
      }
    ],
    "type": "Post"
  },
  {
    "nextTopicSuggestions": [
      "Next.js",
      "React Native",
      "GraphQL with React"
    ],
    "type": "NewSuggestions"
  }
]