[
  {
    "posterName": "React Simplified",
    "text": "Welcome to your learning feed for React! Let's start with the absolute basics. React is a JavaScript library for building user interfaces. It lets you create reusable UI components.",
    "displayStyle": "BASIC"
  },
  {
    "posterName": "CodeCrafter",
    "text": "One of the first things you'll encounter in React is JSX. It looks like HTML, but it's actually a syntax extension for JavaScript. This allows you to write what your UI should look like right inside your JavaScript code.",
    "displayStyle": "AI_IMAGE",
    "aiImagePrompt": "A futuristic code editor showing a mix of HTML tags and JavaScript code, with glowing lines connecting them, symbolizing the integration of JSX."
  },
  {
    "posterName": "Component King",
    "text": "In React, everything is a component. Think of them as independent and reusable bits of code. A component is like a JavaScript function that returns a piece of the user interface.",
    "displayStyle": "WEB_IMAGE",
    "imageSearchQuery": "Lego bricks being assembled into a structure"
  },
  {
    "posterName": "State & Props",
    "text": "To pass data to your components, you use 'props'. Props are like function arguments and are passed from a parent component to a child component. They are read-only, meaning a child component cannot change the props it receives.",
    "displayStyle": "BASIC"
  },
  {
    "posterName": "Quiz",
    "text": "",
    "displayStyle": "QUIZ",
    "quizQuestions": [
      {
        "question": "What is React?",
        "answers": [
          "A JavaScript framework for building mobile apps.",
          "A JavaScript library for building user interfaces.",
          "A database management system."
        ],
        "correctIndex": 1
      },
      {
        "question": "What is JSX?",
        "answers": [
          "A templating language for JavaScript.",
          "A syntax extension for JavaScript that looks like HTML.",
          "A CSS preprocessor."
        ],
        "correctIndex": 1
      },
      {
        "question": "How is data passed from a parent to a child component?",
        "answers": [
          "Through state",
          "Through props",
          "Through context"
        ],
        "correctIndex": 1
      }
    ]
  },
  {
    "posterName": "Deep Dive",
    "text": "Let's talk about 'state'. While props are for passing data down, 'state' is for managing a component's internal data that can change over time. Think of it as a component's personal memory.",
    "displayStyle": "AI_IMAGE",
    "aiImagePrompt": "An illustration of a robot with a thought bubble above its head, inside the bubble are various icons representing data and user interactions, symbolizing internal state."
  },
  {
    "posterName": "The Feynman",
    "text": "Time for a check-in! Explain these concepts in your own words as if you were teaching them to someone else.",
    "displayStyle": "EXERCISE",
    "exerciseQuestions": [
      "What is the difference between props and state?",
      "Why is it said that data flows one-way in React?",
      "What is the purpose of JSX and how does it get converted to regular JavaScript?"
    ]
  },
  {
    "posterName": "React Internals",
    "text": "Ever wondered how React is so fast? It uses a Virtual DOM! Instead of directly manipulating the slow browser DOM, React creates a lightweight copy in memory. When the state changes, it updates this virtual representation first, and then efficiently updates only the changed parts of the real DOM.",
    "displayStyle": "BASIC"
  },
  {
    "posterName": "Lifecycle Methods",
    "text": "Every React component goes through a lifecycle of events. You can tap into these events using special methods. The main phases are Mounting (being created and inserted into the DOM), Updating (re-rendering due to prop or state changes), and Unmounting (being removed from the DOM).",
    "displayStyle": "WEB_IMAGE",
    "imageSearchQuery": "Diagram of a plant lifecycle from seed to withering"
  },
  {
    "posterName": "Quiz",
    "text": "",
    "displayStyle": "QUIZ",
    "quizQuestions": [
      {
        "question": "What is the main difference between props and state?",
        "answers": [
          "Props are for external data, state is for internal data.",
          "Props can be changed by the component, state cannot.",
          "Props are passed from child to parent, state is local."
        ],
        "correctIndex": 0
      },
      {
        "question": "What is the Virtual DOM?",
        "answers": [
          "A direct representation of the HTML in the browser.",
          "A lightweight in-memory copy of the real DOM.",
          "A way to style React components."
        ],
        "correctIndex": 1
      },
      {
        "question": "Which is NOT a phase of the component lifecycle?",
        "answers": [
          "Mounting",
          "Initializing",
          "Updating"
        ],
        "correctIndex": 1
      }
    ]
  },
  {
    "posterName": "List Master",
    "text": "When rendering lists of elements in React, it's crucial to provide a unique 'key' for each item. Keys help React identify which items have changed, are added, or are removed, which helps in efficiently updating the UI.",
    "displayStyle": "BASIC"
  },
  {
    "posterName": "The Feynman",
    "text": "Let's solidify your understanding. Explain these concepts clearly and concisely.",
    "displayStyle": "EXERCISE",
    "exerciseQuestions": [
      "Explain the concept of the Virtual DOM and why it's beneficial for performance.",
      "Describe the three main phases of a component's lifecycle and give an example of a method for each.",
      "Why are keys important when rendering lists in React?"
    ]
  },
  {
    "posterName": "Context is Key",
    "text": "Tired of passing props down through many levels of components? The Context API is here to help! It provides a way to share data that can be considered “global” for a tree of React components, like themes or user authentication, without having to pass props down manually at every level.",
    "displayStyle": "AI_IMAGE",
    "aiImagePrompt": "A glowing orb of data at the top of a tree-like structure, with light trickling down and illuminating various branches (components) directly, bypassing the need to travel down the trunk."
  },
  {
    "posterName": "State Management Pro",
    "text": "For more complex applications, you might need a dedicated state management library. Redux is a popular choice. It provides a predictable state container, making it easier to manage the state of your entire application in one place.",
    "displayStyle": "WEB_IMAGE",
    "imageSearchQuery": "centralized data hub with connections to multiple devices"
  },
  {
    "posterName": "Quiz",
    "text": "",
    "displayStyle": "QUIZ",
    "quizQuestions": [
      {
        "question": "What is the primary purpose of the Context API?",
        "answers": [
          "To replace Redux in all applications.",
          "To avoid 'prop drilling' by passing data through the component tree without manually passing props at every level.",
          "To manage local component state."
        ],
        "correctIndex": 1
      },
      {
        "question": "What is Redux?",
        "answers": [
          "A React component library.",
          "A predictable state container for JavaScript apps.",
          "A tool for testing React components."
        ],
        "correctIndex": 1
      },
      {
        "question": "When should you use a 'key' prop?",
        "answers": [
          "When creating any React element.",
          "When rendering a list of elements.",
          "When passing a function as a prop."
        ],
        "correctIndex": 1
      }
    ]
  },
  {
    "posterName": "Test Master",
    "text": "Testing your React components is crucial for building robust applications. Tools like Jest and React Testing Library help you write tests to ensure your components behave as expected. React Testing Library encourages you to test your components in a way that resembles how a user would interact with them.",
    "displayStyle": "BASIC"
  }
]